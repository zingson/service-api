<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/cache
            http://www.springframework.org/schema/cache/spring-cache.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd"
>

    <!--加载配置文件-->
    <!--<context:property-placeholder location="classpath:db.properties"/>
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations"> &lt;!&ndash; PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 &ndash;&gt;
            <array>
                <value>classpath:db.properties</value>
            </array>
        </property>
    </bean>-->


    <!-- 数据源1 -->
    <bean id="dataSource_db1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 可不用配置driverClassName-->
        <!--<property name="driverClassName" value="${jdbc.driverClass}"/>-->
        <property name="url" value="${db1.url}" />
        <property name="username" value="${db1.username}" />
        <property name="password" value="${db1.password}" />

        <!-- 配置初始化大小、最小空闲、最大连接数-->
        <property name="initialSize" value="2" />
        <property name="minIdle" value="2" />
        <property name="maxActive" value="200" />

        <!-- 配置获取连接等待超时的时间 单位毫秒 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <!-- 检测连接是否有效的sql，要求是一个查询语句 -->
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />

        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" /> <!-- 申请连接时执行validationQuery检测连接是否有效,不需要检测-->
        <property name="testOnReturn" value="false" /> <!-- 归还连接时执行validationQuery检测连接是否有效,不需要检测-->

        <!-- 打开PSCache，如果是mysql，在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。 5.5及以上版本有PSCache，建议开启。 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />

    </bean>

    <!--数据源2-->
    <bean id="dataSource_db2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 可不用配置driverClassName-->
        <!--<property name="driverClassName" value="${jdbc.driverClass}"/>-->
        <property name="url" value="${db2.url}" />
        <property name="username" value="${db2.username}" />
        <property name="password" value="${db2.password}" />

        <!-- 配置初始化大小、最小空闲、最大连接数-->
        <property name="initialSize" value="2" />
        <property name="minIdle" value="2" />
        <property name="maxActive" value="200" />

        <!-- 配置获取连接等待超时的时间 单位毫秒 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <!-- 检测连接是否有效的sql，要求是一个查询语句 -->
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />

        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" /> <!-- 申请连接时执行validationQuery检测连接是否有效,不需要检测-->
        <property name="testOnReturn" value="false" /> <!-- 归还连接时执行validationQuery检测连接是否有效,不需要检测-->

        <!-- 打开PSCache，如果是mysql，在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。 5.5及以上版本有PSCache，建议开启。 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />

    </bean>

    <!-- 多数据源配置 -->
    <bean id ="dataSource" class= "com.ul.core.spring.datasource.DynamicDataSource" >
        <property name ="targetDataSources">
            <map key-type ="java.lang.String">
                <entry value-ref ="dataSource_db1" key= "db1"></entry >
                <entry value-ref ="dataSource_db2" key= "db2"></entry >
            </map >
        </property >
        <!-- 指定默认数据源 -->
        <property name ="defaultTargetDataSource" ref= "dataSource_db1"></property >
    </bean>

    <!-- 动态数据源注解指定切换 @DataSource -->
    <bean id="dataSourceAspect" class="com.ul.core.spring.datasource.DataSourceAspect"></bean>
    <aop:config>
        <aop:aspect ref="dataSourceAspect">
            <aop:pointcut id="beforeOperation" expression="execution(* com.ul.biz.*.mapper.*Mapper.*(..))"/>
            <aop:before pointcut-ref="beforeOperation" method="beforeMethod"/>
        </aop:aspect>
    </aop:config>


    <!-- Spring和MyBatis整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件，**表示迭代查找，classpath后要加*，不然读不到jar包中的配置 -->
        <property name="mapperLocations" value="classpath*:mapper/*/*Mapper.xml" />
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ul.biz.*.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 注解方式配置事物 在service中使用@Transactional 只回滚运行时异常-->
    <tx:annotation-driven transaction-manager="transactionManager"/>



</beans>

